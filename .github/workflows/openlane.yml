name: OpenLane R2G Flow
on:
  workflow_dispatch:
  push:
    paths:
      - "src/**"
      - ".github/workflows/openlane-r2g.yml"

jobs:
  openlane-r2g:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Set up Docker
        uses: docker/setup-buildx-action@v3
        
      - name: Pull OpenLane Docker image
        run: |
          docker pull efabless/openlane:2023.07.19-1
          
      - name: Prepare design directory structure
        run: |
          # Create the design directory structure that OpenLane expects
          mkdir -p designs/my_design/src
          mkdir -p runs
          
          # Copy source files
          cp -r src/* designs/my_design/src/
          
          # List the files to verify
          echo "Source files copied:"
          ls -la designs/my_design/src/
          
      - name: Create OpenLane config
        run: |
          cat > designs/my_design/config.json << 'EOF'
          {
              "DESIGN_NAME": "my_design",
              "VERILOG_FILES": "dir::src/*.v",
              "CLOCK_PERIOD": 10,
              "CLOCK_PORT": "clk",
              "CLOCK_NET": "clk",
              "PDK": "sky130A",
              "STD_CELL_LIBRARY": "sky130_fd_sc_hd",
              "FP_SIZING": "absolute",
              "DIE_AREA": "0 0 100 100",
              "PL_BASIC_PLACEMENT": true,
              "PL_TARGET_DENSITY": 0.5,
              "GLB_RT_ADJUSTMENT": 0.1,
              "SYNTH_STRATEGY": "AREA 0"
          }
          EOF
          
          # Verify config file was created
          echo "Config file created:"
          cat designs/my_design/config.json
          
      - name: Create pin order config (optional)
        run: |
          cat > designs/my_design/pin_order.cfg << 'EOF'
          #N
          clk
          rst_n
          
          #S
          
          #E
          
          #W
          EOF
          
      - name: Debug directory structure
        run: |
          echo "Current directory structure:"
          find . -type f -name "*.json" -o -name "*.v" -o -name "*.cfg" | head -20
          echo ""
          echo "designs directory:"
          ls -la designs/ || echo "designs directory not found"
          echo ""
          echo "designs/my_design directory:"
          ls -la designs/my_design/ || echo "designs/my_design directory not found"
          
      - name: Run OpenLane R2G Flow
        run: |
          # Create a unique tag for this run
          RUN_TAG="run_$(date +%Y_%m_%d_%H_%M_%S)"
          echo "Running OpenLane with tag: $RUN_TAG"
          
          # Run OpenLane with correct volume mounting
          docker run --rm \
            -v $PWD/designs:/openlane/designs \
            -v $PWD/runs:/openlane/designs/my_design/runs \
            efabless/openlane:2023.07.19-1 \
            sh -c "flow.tcl -design my_design -tag $RUN_TAG"
            
      - name: Check results and create summary
        run: |
          if [ -d "runs" ]; then
            echo "## OpenLane Flow Results" > results_summary.md
            echo "" >> results_summary.md
            
            # Find the latest run directory
            LATEST_RUN=$(ls -t runs/ | head -n1)
            echo "Latest run: $LATEST_RUN" >> results_summary.md
            echo ""
            
            # List all contents of runs directory for debugging
            echo "All runs:"
            ls -la runs/
            echo ""
            
            # Check if the run directory exists and list its contents
            if [ -d "runs/$LATEST_RUN" ]; then
              echo "Contents of latest run ($LATEST_RUN):"
              ls -la "runs/$LATEST_RUN/" || echo "Cannot list run directory contents"
              echo ""
              
              # Check for results directory
              if [ -d "runs/$LATEST_RUN/results" ]; then
                echo "Results directory structure:"
                find "runs/$LATEST_RUN/results" -type f | head -10
              fi
            fi
            
            # Check if final GDS was generated
            if [ -f "runs/$LATEST_RUN/results/final/gds/my_design.gds" ]; then
              echo "✅ GDSII generation: SUCCESS" >> results_summary.md
            else
              echo "❌ GDSII generation: FAILED" >> results_summary.md
              # Look for GDS files anywhere in the run directory
              echo "Looking for any GDS files..."
              find "runs/$LATEST_RUN" -name "*.gds" 2>/dev/null || echo "No GDS files found"
            fi
            
            # Check if DEF was generated
            if [ -f "runs/$LATEST_RUN/results/final/def/my_design.def" ]; then
              echo "✅ DEF generation: SUCCESS" >> results_summary.md
            else
              echo "❌ DEF generation: FAILED" >> results_summary.md
              # Look for DEF files anywhere in the run directory
              echo "Looking for any DEF files..."
              find "runs/$LATEST_RUN" -name "*.def" 2>/dev/null || echo "No DEF files found"
            fi
            
            # Check for any error logs
            if [ -f "runs/$LATEST_RUN/logs/openlane.log" ]; then
              echo "" >> results_summary.md
              echo "### Log Summary (last 20 lines)" >> results_summary.md
              echo "\`\`\`" >> results_summary.md
              tail -n 20 "runs/$LATEST_RUN/logs/openlane.log" >> results_summary.md
              echo "\`\`\`" >> results_summary.md
            fi
            
            # Add timing summary if available
            if [ -f "runs/$LATEST_RUN/reports/final_summary_report.csv" ]; then
              echo "" >> results_summary.md
              echo "### Timing Summary" >> results_summary.md
              echo "\`\`\`" >> results_summary.md
              head -n 10 "runs/$LATEST_RUN/reports/final_summary_report.csv" >> results_summary.md
              echo "\`\`\`" >> results_summary.md
            fi
            
            cat results_summary.md
          else
            echo "❌ No runs directory found - flow failed to start"
            echo "Available directories:"
            ls -la
            echo ""
            echo "Docker container may have failed. Check Docker logs above."
            exit 1
          fi
          
      - name: Upload OpenLane Results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: openlane-results-${{ github.run_number }}
          path: |
            runs/
            results_summary.md
            designs/my_design/config.json
          retention-days: 30
          
      - name: Upload Logs on Failure
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: openlane-logs-${{ github.run_number }}
          path: |
            runs/*/logs/
          retention-days: 7
